const axios = require('axios');
const querystring = require('querystring');
const supabase = require('../utils/supabase');

const redirectUri = process.env.SPOTIFY_REDIRECT_URI;
const clientId = process.env.SPOTIFY_CLIENT_ID;
const clientSecret = process.env.SPOTIFY_CLIENT_SECRET;

const getSpotifyAuthUrl = (userId) => {
  const scope = 'user-library-read playlist-modify-public playlist-modify-private';
  const state = userId;
  return `https://accounts.spotify.com/authorize?${querystring.stringify({
    response_type: 'code',
    client_id: clientId,
    scope,
    redirect_uri: redirectUri,
    state,
  })}`;
};

const handleCallbackExchange = async (code, state) => {
  const body = querystring.stringify({
    grant_type: 'authorization_code',
    code,
    redirect_uri: redirectUri,
    client_id: clientId,
    client_secret: clientSecret,
  });

  const { data } = await axios.post('https://accounts.spotify.com/api/token', body, {
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
  });

  await supabase.from('users').update({
    spotify_access_token: data.access_token,
    spotify_refresh_token: data.refresh_token,
  }).eq('clerk_id', state);
};

const fetchUserLikedTracks = async (userId) => {
  const { data: user } = await supabase.from('users').select('*').eq('clerk_id', userId).single();
  const { data } = await axios.get('https://api.spotify.com/v1/me/tracks?limit=20', {
    headers: { Authorization: `Bearer ${user.spotify_access_token}` },
  });

  return data.items.map(item => ({
    track_name: item.track.name,
    artist_name: item.track.artists[0].name,
    spotify_uri: item.track.uri,
  }));
};

const createPlaylistForMood = async (userId, moodText, tracks) => {
  const { data: user } = await supabase.from('users').select('*').eq('clerk_id', userId).single();

  const playlistResponse = await axios.post(`https://api.spotify.com/v1/users/${user.spotify_id}/playlists`, {
    name: `Mood Booster - ${moodText}`,
    description: `Generated by Sarang for mood: ${moodText}`,
    public: false,
  }, {
    headers: { Authorization: `Bearer ${user.spotify_access_token}` },
  });

  const uris = tracks.map(t => t.spotify_uri);
  await axios.post(`https://api.spotify.com/v1/playlists/${playlistResponse.data.id}/tracks`, {
    uris,
  }, {
    headers: { Authorization: `Bearer ${user.spotify_access_token}` },
  });

  return playlistResponse.data.external_urls.spotify;
};

module.exports = {
  getSpotifyAuthUrl,
  handleCallbackExchange,
  fetchUserLikedTracks,
  createPlaylistForMood,
};
